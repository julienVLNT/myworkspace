// Discretisation temporelle
real t = 0;
real tf = 1;
real dt = 0.1;

// Maillage
real L = 9;
real H = 3;
border bas(t=0, 1){
    x = t*L;
    y = 0;
    label=1;
}
border droit(t=0, 1){
    x = L;
    y = t*H;
    label=2;
}
border haut(t=0, 1){
    x = (1-t)*L;
    y = H;
    label=3;
}
border gauche(t=0, 1){
    x = 0;
    y = (1-t)*H;
    label=4;
}

real x0 = L/3;
real y0 = H/2;
real r  = H/6;
border obstacle(t=0, 1){
    x = x0 + r*cos(2*pi*t);
    y = y0 + r*sin(2*pi*t);
    label=5;
}

int nel = 64;
mesh th = buildmesh( bas(L/H*nel) + droit(nel) + haut(L/H*nel) + gauche(nel) + obstacle(-nel) );


// Espaces d'interpolation et champs
fespace Vh(th, P2);
Vh vx, vy;
Vh vpx, vpy;
Vh wx, wy;

fespace Qh(th, P1);
Qh p;
Qh q;

// Setup
real vmax = 5;
func vin  = vmax * (1.-(y-H/2.)^2/(H/2.)^2);
func fx = 0;
func fy = 0;

// Resolution
solve navier([vx, vy, p], [wx, wy, q])
    = int2d(th)(
		  1/dt*( vx*wx + vy*wy )
		+ ( dx(vx)*dx(wx) + dy(vx)*dy(wx) + dx(vy)*dx(wy) + dy(vy)*dy(wy) )
		- p*(dx(wx) + dy(wy))
		- q*(dx(vx) + dy(vy))
	)
	- int2d(th)(
		  1/dt*[convect([vpx, vpy], -dt, vpx), convect([vpx, vpy], -dt, vpy)]' * [wx, wy]
		+ [fx, fy]' * [wx, wy]
	)
	+ on(4, vx=vin, vy=0.)
	+ on(1, 3, 5, vx=0., vy=0.)
	;

// Extrapolation en temps
for (int i = 0; i < tf/dt+dt; i++) {
    
    navier;

    vpx = vx;
    vpy = vy;
    t += dt;

	plot([vx, vy], p, cmm="Ecoulement - t="+t);
}