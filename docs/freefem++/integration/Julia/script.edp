// Exports des donnees
ofstream mycsv("data/vortex.csv");
mycsv << "t" << "," << "dt" << "," <<  "vortex" << endl;
real nw;

load "iovtk"
int[int] ordre = [1];
string base;

// Maillage
real L = 3;
real H = 1;

border bas(t=0, 1){
    x = t*L;
    y = 0;
    label=1;    // label impermeable
}
border droit(t=0, 1){
    x = L;
    y = t*H;
    label=2;    // label de sortie
}
border haut(t=0, 1){
    x = (1-t)*L;
    y = H;
    label=1;
}
border gauche(t=0, 1){
    x = 0;
    y = (1-t)*H;
    label=3;    // label d'entree du canal
}

real x0 = L/3;
real y0 = H/2;
real r  = H/6;
real sec = 6*pi/180;

border c1(t=0, pi/2-sec){
	x = x0 + r*cos(t);
	y = y0 + r*sin(t);
    label=1;
}
border c2(t=pi/2-sec, pi/2+sec){
	x = x0 + r*cos(t);
	y = y0 + r*sin(t);
    label=4;    // label d'injection depuis le haut de l'obstacle
}
border c3(t=pi/2+sec, 3*pi/2-sec){
	x = x0 + r*cos(t);
	y = y0 + r*sin(t);
    label=1;
}
border c4(t=3*pi/2-sec, 3*pi/2+sec){
	x = x0 + r*cos(t);
	y = y0 + r*sin(t);
    label=5;    // label d'injection depuis le bas de l'obstacle
}
border c5(t=3*pi/2+sec, 2*pi){
	x = x0 + r*cos(t);
	y = y0 + r*sin(t);
    label=1;
}

int nely = 32;
int nelx = L/H*nely;

mesh th = buildmesh(
            bas(nelx)
        +   droit(nely)
        +   haut(nelx)
        +   gauche(nely)
        +   c1(-nelx/3)
        +   c2(-nelx/3)
        +   c3(-nelx)
        +   c4(-nelx)
        +   c5(-nelx)
        );

// Caracterisation de l'ecoulement
real mu = 1e-3;
real vmax = 1.0;
real vb = 2/3*vmax;
real re = vb*H/mu;

// Espaces d'interpolation
fespace V(th, P2);      // vitesses
fespace W(th, P2dc);    // vortex
fespace Q(th, P1);      // pression

V vx, vy;

// Discretisation temporelle
real t = 0;               // date initiale
real tf = 10;             // date finale
real dt = H/nelx/vmax;    // C.F.L

// Conditions aux limites
include "getARGV.idp"

func ventx = vmax * (1.-(y-H/2.)^2/(H/2.)^2);
func venty = 0.0;

real VINJ = getARGV("-vinj", 1);    // norme de la vitesse d'injection
real beta = getARGV("-beta", 1);    // angle (par rapport ï¿½ e_y) de la direction de l'injection
func vinjx = VINJ*sin(beta);
func vinjy = VINJ*cos(beta);

// Construction du schema
real epspq = 1e-10;
real eps = 1e-6;

varf vbcv([vx, vy, p], [wx, wy, q]) = on(1, vx=ventx, vy=venty) + on(3, vx=0, vy=0);

varf vA(p, q) 
    = int2d(th)( [dx(p), dy(p)]'*[dx(q), dy(q)] )    // produit scalaire des gradient de pression et pression virtuelle
    + int1d(th,2)( 100*p*q )                         // penalisation sur la sortie
    ;

varf vM(p, q)
    = int2d(th, qft=qf2pT)( p*q )
    + on(3, p=0)
    ;

varf vV(v, w) 
    = int2d(th)( 
            1/dt*(v*w)
        +   mu*(dx(v)*dx(w) + dy(v)*dy(w))
    )
    + on(1, 3, v=0)
    ;

varf vdx(p, v) = int2d(th)( p*dx(v) );    // projection horizontale de p*grad(w)
varf vdy(p, v) = int2d(th)( p*dy(v) );    // projection verticale de p*grad(w)

varf vbcx(v, w) = on(1, v=ventx) + on(3, v=0.0);
varf vrhsx(v, w) = int2d(th)(convect([vx, vy], -dt, vx)*w/dt) + vbcx;

varf vbcy(v, w) = on(1, v=venty) + on(3, v=0.0);
varf vrhsy(v, w) = int2d(th)(convect([vx, vy], -dt, vy)*w/dt) + vbcx;

// Construction des elements du systeme lineaire
matrix pAM = vM(Q,Q);
matrix pAA = vA(Q,Q);
matrix AV  = vV(V,V);
matrix Bx  = vdx(Q,V);
matrix By  = vdy(Q,V);

real[int] brhsx = vbcx(0,V);
real[int] brhsy = vbcy(0,V);

// Fonction d'Uzawa
func real[int] Juzawa( real[int]& pp ){
    real[int] bx = brhsx;
    real[int] by = brhsy;

    bx += Bx*pp;
    by += By*pp;

    vx[] = AV^(-1) * bx;
    vy[] = AV^(-1) * by;

    pp  = Bx'*vx[];
    pp += By'*vy[];
    pp  = -pp;

    return pp;
}

// Fonction de preconditionnement
func real[int] Precon( real[int]& p ){
    real[int] pa = pAA^-1*p;
    real[int] pm = pAM^-1*p;
    real[int] pp = 1/dt*pa + mu*pm;
    return pp;
}

// Initialisation
W w = 0;
Q p = 0;

// Extrapolation temporelle
for(int i=0; i < tf/dt + dt; i++){

    // Mise a jour
    brhsx = vrhsx(0,V);
    brhsy = vrhsy(0,V);

    // Resolution du probleme d'optimisation
    int res = LinearCG(Juzawa, p[], precon=Precon, nbiter=100, verbosity=10, veps=eps);
    assert(res==1);
    eps = -abs(eps);

    // Calcul du vortex
    w = -dy(vx) + dx(vy);
    nw = sqrt( int2d(th)(w^2) / th.area );
    
    // Export
    mycsv << t << ", " << dt << ", " << nw << endl;
    base = "data/vitesse_" + i + ".vtk";
    savevtk(base, th, [vx, vy, 0.0], dataname="Vit", order=ordre);
    base = "data/vortex_" + i + ".vtk";
    savevtk(base, th, [w, 0.0, 0.0], dataname="Vor", order=ordre);

    // Mise a jour du pas de temps
    dt = min(dt, tf-t);
    t += dt;
    if(dt < 1e-10*tf) { break; }
}